@model HoaDon.Models.MD_ThongTinHoaDon
@{
    ViewBag.Title = "Hóa Đơn";
}


<link href="~/Content/css/base.css" rel="stylesheet" />
<link href="~/Content/css/style.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.1/css/all.min.css">
<div class="modal-content" style="width: 70%; padding: 20px;">
    <div class="modal-header">
        <h4 style="font-weight: 700;">HÓA ĐƠN BÁN LẺ</h4>
    </div>
    <div class="modal-body">
        <div class="modal-input-body">
            @using (Html.BeginForm("HoaDon", "Home", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()

                <div class="line-form">
                    <div class="custom-input">
                        <div class="wrap-info">
                            <div class="title-status">
                                <p>Người Mua Hàng</p>
                            </div>
                        </div>
                        <div class="wrap-input">
                            @Html.TextBoxFor(model => model.KhachHang.TenKH, new { @class = "form-control", placeholder = "Nhập người mua hàng" })
                        </div>
                        @Html.ValidationMessageFor(model => model.KhachHang.TenKH, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="line-form">
                    <div class="custom-input">
                        <div class="wrap-info">
                            <div class="title-status">
                                <p>Địa Chỉ</p>
                            </div>
                        </div>
                        <div class="wrap-input">
                            @Html.TextBoxFor(model => model.KhachHang.DiaChi, new { @class = "form-control", placeholder = "Nhập địa chỉ" })
                        </div>
                        @Html.ValidationMessageFor(model => model.KhachHang.DiaChi, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="line-form">
                    <div class="custom-input">
                        <div class="wrap-info">
                            <div class="title-status">
                                <p>Số Điện Thoại</p>
                            </div>
                        </div>
                        <div class="wrap-input">
                            @Html.TextBoxFor(model => model.KhachHang.SoDienThoai, new { @class = "form-control", placeholder = "Nhập số điện thoại" })
                        </div>
                        @Html.ValidationMessageFor(model => model.KhachHang.SoDienThoai, "", new { @class = "text-danger" })
                    </div>
                </div>

                <table>
                    <thead>
                        <tr>
                            <th>STT</th>
                            <th>Tên Hàng - Quy Cách</th>
                            <th>D.V.T</th>
                            <th>S.L</th>
                            <th>Giá Đ.V</th>
                            <th>Thành Tiền</th>
                        </tr>
                    </thead>
                    <tbody id="table-body">
                        <tr>
                            <td>1</td>
                            <td><input type="text" class="dotted-input"></td>
                            <td><input type="text" class="dotted-input"></td>
                            <td><input type="number" class="dotted-input" value="0" onchange="updateInvoice()"></td>
                            <td><input type="number" class="dotted-input" value="0" onchange="updateInvoice()"></td>
                            <td><input type="text" class="dotted-input" value="0" readonly></td>
                        </tr>
                    </tbody>
                </table>

                <div class="wrap-btn">
                    <button type="submit" class="btn btn-primary">Tạo Hóa Đơn</button>
                </div>

                <div class="action-icons">
                    <i class="fa-solid fa-square-plus" style="color: green;" onclick="addItem()"></i>
                    <i class="fa-solid fa-print" style="color: blue;" onclick="window.print()"></i>
                </div>
                <div class="footer">
                    <div>
                        <span>Tổng tiền: </span>
                        <span id="tong-tien"> </span> VND
                    </div>
                    <div>
                        <span>Cộng thành tiền (viết bằng chữ): </span>
                        <span id="tong-tien-chu"></span>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script>

    function addItem() {
        // Lấy body của bảng
        const tableBody = document.getElementById('table-body');

        // Tạo một dòng mới (tr)
        const newRow = tableBody.insertRow();

        // Tạo các ô trong dòng mới và điền dữ liệu
        const cell1 = newRow.insertCell(0);
        const cell2 = newRow.insertCell(1);
        const cell3 = newRow.insertCell(2);
        const cell4 = newRow.insertCell(3);
        const cell5 = newRow.insertCell(4);
        const cell6 = newRow.insertCell(5);

        // Đặt giá trị cho các ô mới
        cell1.innerText = tableBody.rows.length; // Tự động đánh số STT
        cell2.innerHTML = '<input type="text" class="dotted-input">';
        cell3.innerHTML = '<input type="text" class="dotted-input">';
        cell4.innerHTML = '<input type="number" class="dotted-input" value="0" onchange="updateInvoice()">';
        cell5.innerHTML = '<input type="number" class="dotted-input" value="0" onchange="updateInvoice()">';
        cell6.innerHTML = '<input type="text" class="dotted-input" value="0" readonly>';

        // Cập nhật tổng tiền
        updateInvoice();
    }
    function updateInvoice() {
        let total = 0;
        const rows = document.getElementById('table-body').rows;

        Array.from(rows).forEach(row => {
            const quantity = parseFloat(row.cells[3].querySelector('input').value) || 0;
            const price = parseFloat(row.cells[4].querySelector('input').value) || 0;
            const amount = quantity * price;

            row.cells[5].querySelector('input').value = amount.toLocaleString();
            total += amount;
        });

        document.getElementById('tong-tien').innerText = total.toLocaleString();
        document.getElementById('tong-tien-chu').innerText = numberToWords(total) + ' đồng';
    }

    function numberToWords(num) {
        const belowTen = ["", "một", "hai", "ba", "bốn", "năm", "sáu", "bảy", "tám", "chín"];
        const belowTwenty = ["mười", "mười một", "mười hai", "mười ba", "mười bốn", "mười lăm", "mười sáu", "mười bảy", "mười tám", "mười chín"];
        const tens = ["", "", "hai mươi", "ba mươi", "bốn mươi", "năm mươi", "sáu mươi", "bảy mươi", "tám mươi", "chín mươi"];

        if (num === 0) return "không";
        if (num < 10) return belowTen[num];
        if (num < 20) return belowTwenty[num - 10];

        let result = "";
        if (num >= 1000) {
            result += belowTen[Math.floor(num / 1000)] + " nghìn ";
            num %= 1000;
        }
        if (num >= 100) {
            result += belowTen[Math.floor(num / 100)] + " trăm ";
            num %= 100;
        }
        if (num >= 20) {
            result += tens[Math.floor(num / 10)] + " ";
            num %= 10;
        }
        if (num > 0) {
            result += belowTen[num];
        }

        return result.trim();
    }
</script>
